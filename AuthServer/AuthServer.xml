<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AuthServer</name>
    </assembly>
    <members>
        <member name="T:AuthServer.Config">
            <summary>
            IdentityServer配置
            </summary>
        </member>
        <member name="M:AuthServer.Config.GetIdentityResources">
            <summary>
            添加对OpenID Connect的支持
            </summary>
            <returns></returns>
        </member>
        <member name="M:AuthServer.Config.GetApiResources">
            <summary>
            定义系统中的API资源
            </summary>
            <returns></returns>
        </member>
        <member name="M:AuthServer.Config.GetClients">
            <summary>
            客户端访问资源
            </summary>
            <returns></returns>
        </member>
        <member name="F:AuthServer.Controllers.LoginController._users">
            <summary>
            测试用户信息
            </summary>
        </member>
        <member name="F:AuthServer.Controllers.LoginController._interaction">
            <summary>
            提供用户界面使用的服务与IdentityServer进行通信。
            </summary>
        </member>
        <member name="F:AuthServer.Controllers.LoginController._events">
            <summary>
            事件服务的接口
            </summary>
        </member>
        <member name="M:AuthServer.Controllers.LoginController.Challenge(System.String,System.String)">
            <summary>
            启动到外部身份验证提供程序的往返
            </summary>
            <param name="provider"></param>
            <param name="returnUrl"></param>
            <returns></returns>
        </member>
        <member name="T:AuthServer.Service.LoginValidator">
            <summary>
            用户登录校验
            </summary>
        </member>
        <member name="M:AuthServer.Service.LoginValidator.ValidateAsync(IdentityServer4.Validation.ResourceOwnerPasswordValidationContext)">
            <summary>
            登录用户校验
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:AuthServer.Service.LoginValidator.GetUserClaims">
            <summary>
            可以根据需要设置相应的Claim
            </summary>
            <returns></returns>
        </member>
        <member name="T:AuthServer.Service.ProfileService">
            <summary>
            获取用户信息并返回给客户端
            </summary>
        </member>
        <member name="M:AuthServer.Service.ProfileService.GetProfileDataAsync(IdentityServer4.Models.ProfileDataRequestContext)">
            <summary>
            获取用户信息
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:AuthServer.Service.ProfileService.IsActiveAsync(IdentityServer4.Models.IsActiveContext)">
            <summary>
            获取或设置一个值，该值指示主题是否处于活动状态并且可以接收令牌。
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:IdentityServer.Quickstart.WeChatController">
            <summary>
            微信公众号登录
            </summary>
        </member>
        <member name="M:IdentityServer.Quickstart.WeChatController.WeChatCheck(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            验证微信签名
            </summary>
            * 将token、timestamp、nonce三个参数进行字典序排序
            * 将三个参数字符串拼接成一个字符串进行sha1加密
            * 开发者获得加密后的字符串可与signature对比，标识该请求来源于微信。
            <returns></returns>
        </member>
        <member name="M:IdentityServer.Quickstart.WeChatController.HmacSha1Sign(System.String)">
            <summary>
            HMAC-SHA1加密算法
            </summary>
            <param name="str">加密字符串</param>
            <returns></returns>
        </member>
        <member name="M:IdentityServer.Quickstart.WeChatController.GetQRcode">
            <summary>
            生成二维码
            </summary>
            <returns></returns>
        </member>
        <member name="M:IdentityServer.Quickstart.WeChatController.WeChatLogin(System.String)">
            <summary>
            微信登录返回接口
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="T:IdentityServer4.Quickstart.UI.AccountController">
             <summary>
            此示例控制器为本地和外部帐户实现典型的登录/注销/提供工作流程。
            登录服务封装了与用户数据存储的交互。 此数据存储仅在内存中，不能用于生产！
            交互服务为UI提供了一种与身份服务器通信以进行验证和上下文检索的方法
             </summary>
        </member>
        <member name="F:IdentityServer4.Quickstart.UI.AccountController._users">
            <summary>
            测试用户信息
            </summary>
        </member>
        <member name="F:IdentityServer4.Quickstart.UI.AccountController._interaction">
            <summary>
            提供用户界面使用的服务与IdentityServer进行通信。
            </summary>
        </member>
        <member name="F:IdentityServer4.Quickstart.UI.AccountController._clientStore">
            <summary>
            检索客户端配置
            </summary>
        </member>
        <member name="F:IdentityServer4.Quickstart.UI.AccountController._schemeProvider">
            <summary>
            负责管理支持的authenticationSchemes。
            </summary>
        </member>
        <member name="F:IdentityServer4.Quickstart.UI.AccountController._events">
            <summary>
            事件服务的接口
            </summary>
        </member>
        <member name="M:IdentityServer4.Quickstart.UI.AccountController.Login(System.String)">
            <summary>
            进入登录工作流程的入口点
            </summary>
        </member>
        <member name="M:IdentityServer4.Quickstart.UI.AccountController.Login1(IdentityServer4.Quickstart.UI.LoginInputModel,System.String)">
            <summary>
            用户登录
            </summary>
        </member>
        <member name="M:IdentityServer4.Quickstart.UI.AccountController.Logout(System.String)">
            <summary>
            显示注销页面
            </summary>
        </member>
        <member name="M:IdentityServer4.Quickstart.UI.AccountController.Logout(IdentityServer4.Quickstart.UI.LogoutInputModel)">
             <summary>
            处理注销页面回发
             </summary>
        </member>
        <member name="M:IdentityServer4.Quickstart.UI.AccountController.Login(IdentityServer4.Quickstart.UI.LoginInputModel,System.String)">
            <summary>
            自定义登录
            </summary>
            <param name="model"></param>
            <param name="button"></param>
            <returns></returns>
        </member>
        <member name="T:IdentityServer4.Quickstart.UI.ConsentController">
            <summary>
            This controller processes the consent UI
            </summary>
        </member>
        <member name="M:IdentityServer4.Quickstart.UI.ConsentController.Index(System.String)">
            <summary>
            Shows the consent screen
            </summary>
            <param name="returnUrl"></param>
            <returns></returns>
        </member>
        <member name="M:IdentityServer4.Quickstart.UI.ConsentController.Index(IdentityServer4.Quickstart.UI.ConsentInputModel)">
            <summary>
            Handles the consent screen postback
            </summary>
        </member>
        <member name="M:IdentityServer4.Quickstart.UI.Extensions.IsPkceClientAsync(IdentityServer4.Stores.IClientStore,System.String)">
            <summary>
            Determines whether the client is configured to use PKCE.
            </summary>
            <param name="store">The store.</param>
            <param name="client_id">The client identifier.</param>
            <returns></returns>
        </member>
        <member name="T:IdentityServer4.Quickstart.UI.GrantsController">
            <summary>
            This sample controller allows a user to revoke grants given to clients
            </summary>
        </member>
        <member name="M:IdentityServer4.Quickstart.UI.GrantsController.Index">
            <summary>
            Show list of grants
            </summary>
        </member>
        <member name="M:IdentityServer4.Quickstart.UI.GrantsController.Revoke(System.String)">
            <summary>
            Handle postback to revoke a client
            </summary>
        </member>
        <member name="M:IdentityServer4.Quickstart.UI.HomeController.Error(System.String)">
            <summary>
            Shows the error page
            </summary>
        </member>
        <member name="M:Host.Quickstart.Account.ExternalController.Challenge(System.String,System.String)">
            <summary>
            initiate roundtrip to external authentication provider
            </summary>
        </member>
        <member name="M:Host.Quickstart.Account.ExternalController.Callback">
            <summary>
            Post processing of external authentication
            </summary>
        </member>
    </members>
</doc>
